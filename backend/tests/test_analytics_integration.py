#!/usr/bin/env python3
"""
Test d'int√©gration pour l'architecture d'analytics.
Ce script v√©rifie la fonctionnalit√© de r√©cup√©ration des donn√©es depuis diff√©rentes
plateformes d'analytics (PostHog, Mixpanel, Amplitude, etc.) en utilisant l'architecture unifi√©e.
"""

import os
import sys
import json
from pathlib import Path
from datetime import datetime, timedelta

# Ajouter le r√©pertoire parent au chemin Python
sys.path.append(str(Path(__file__).parent.parent))

from models.analytics_providers import (
    AnalyticsFactory,
    PostHogProvider,
    MixpanelProvider,
    AmplitudeProvider,
    get_configured_provider
)

def check_environment_variables():
    """V√©rifie les variables d'environnement requises pour les tests."""
    print("\n=== Variables d'environnement ===")
    
    # V√©rifier la configuration du fournisseur d'analytics
    provider_type = os.getenv("ANALYTICS_PROVIDER", "posthog")
    print(f"Fournisseur d'analytics configur√©: {provider_type}")
    
    # V√©rifier les variables sp√©cifiques au fournisseur
    if provider_type.lower() == "posthog":
        required_vars = ["POSTHOG_API_KEY", "POSTHOG_PROJECT_ID", "POSTHOG_API_URL"]
    elif provider_type.lower() == "mixpanel":
        required_vars = ["MIXPANEL_API_KEY", "MIXPANEL_API_SECRET"]
    elif provider_type.lower() == "amplitude":
        required_vars = ["AMPLITUDE_API_KEY"]
    else:
        print(f"‚ö†Ô∏è Fournisseur inconnu: {provider_type}")
        return False
    
    all_present = True
    for var in required_vars:
        value = os.getenv(var)
        if value:
            # Masquer les cl√©s API pour la s√©curit√©
            if var.endswith("API_KEY") or var.endswith("SECRET"):
                masked_value = value[:5] + "..." + value[-5:] if len(value) > 10 else "***"
                print(f"‚úÖ {var} = {masked_value}")
            else:
                print(f"‚úÖ {var} = {value}")
        else:
            print(f"‚ùå {var} n'est pas d√©fini")
            all_present = False
    
    return all_present

def test_provider_initialization():
    """Teste l'initialisation des fournisseurs d'analytics."""
    print("\n=== Test d'initialisation des fournisseurs ===")
    
    try:
        # R√©cup√©rer le fournisseur configur√©
        provider = get_configured_provider()
        provider_type = os.getenv("ANALYTICS_PROVIDER", "posthog").lower()
        
        # V√©rifier que le bon type de fournisseur a √©t√© cr√©√©
        if provider_type == "posthog" and isinstance(provider, PostHogProvider):
            print("‚úÖ Fournisseur PostHog correctement initialis√©")
        elif provider_type == "mixpanel" and isinstance(provider, MixpanelProvider):
            print("‚úÖ Fournisseur Mixpanel correctement initialis√©")
        elif provider_type == "amplitude" and isinstance(provider, AmplitudeProvider):
            print("‚úÖ Fournisseur Amplitude correctement initialis√©")
        else:
            print(f"‚ùå Type de fournisseur incorrect: {type(provider).__name__}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur d'initialisation du fournisseur: {e}")
        return False

def test_session_retrieval(page_id="/login", days=30):
    """
    Teste la r√©cup√©ration des sessions pour une page sp√©cifique.
    
    Args:
        page_id (str): Identifiant de la page
        days (int): Nombre de jours √† analyser
    """
    print(f"\n=== Test de r√©cup√©ration des sessions pour {page_id} ({days} jours) ===")
    
    try:
        # R√©cup√©rer le fournisseur configur√©
        provider = get_configured_provider()
        
        # Calculer la plage de dates
        date_to = datetime.now().isoformat()
        date_from = (datetime.now() - timedelta(days=days)).isoformat()
        
        # R√©cup√©rer les sessions
        print("R√©cup√©ration des sessions...")
        sessions = provider.get_sessions(page_id, date_from=date_from, date_to=date_to)
        
        # Afficher les informations sur les sessions r√©cup√©r√©es
        print(f"Sessions r√©cup√©r√©es: {len(sessions)}")
        
        if sessions:
            # Afficher des d√©tails sur la premi√®re session
            session = sessions[0]
            session_id = session.get("id", "N/A")
            print(f"Exemple de session (ID: {session_id}):")
            
            # Afficher quelques informations pertinentes
            if "snapshots" in session:
                snapshots = session["snapshots"]
                pages = snapshots.get("pages", [])
                print(f"  Pages visit√©es: {len(pages)}")
                for i, page in enumerate(pages[:3], 1):
                    print(f"    {i}. {page.get('url', 'URL inconnue')}")
                if len(pages) > 3:
                    print(f"    ... et {len(pages) - 3} autres pages")
                    
            elif "pages" in session:
                pages = session["pages"]
                print(f"  Pages visit√©es: {len(pages)}")
                for i, page in enumerate(pages[:3], 1):
                    print(f"    {i}. {page.get('path', 'Chemin inconnu')}")
                if len(pages) > 3:
                    print(f"    ... et {len(pages) - 3} autres pages")
            
            if "events" in session:
                events = session["events"]
                print(f"  √âv√©nements: {len(events)}")
                event_types = {}
                for event in events:
                    event_type = event.get("type", "Inconnu")
                    event_types[event_type] = event_types.get(event_type, 0) + 1
                
                print("  Types d'√©v√©nements:")
                for event_type, count in event_types.items():
                    print(f"    - {event_type}: {count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des sessions: {e}")
        return False

def test_feedback_retrieval(page_id="/login", days=30):
    """
    Teste la r√©cup√©ration des feedbacks pour une page sp√©cifique.
    
    Args:
        page_id (str): Identifiant de la page
        days (int): Nombre de jours √† analyser
    """
    print(f"\n=== Test de r√©cup√©ration des feedbacks pour {page_id} ({days} jours) ===")
    
    try:
        # R√©cup√©rer le fournisseur configur√©
        provider = get_configured_provider()
        
        # Calculer la plage de dates
        date_to = datetime.now().isoformat()
        date_from = (datetime.now() - timedelta(days=days)).isoformat()
        
        # R√©cup√©rer les feedbacks
        print("R√©cup√©ration des feedbacks...")
        feedbacks = provider.get_user_feedback(page_id, date_from=date_from, date_to=date_to)
        
        # Afficher les informations sur les feedbacks r√©cup√©r√©s
        print(f"Feedbacks r√©cup√©r√©s: {len(feedbacks)}")
        
        if feedbacks:
            # Afficher des d√©tails sur les feedbacks
            sentiment_counts = {"positive": 0, "negative": 0, "neutral": 0}
            for feedback in feedbacks:
                sentiment = feedback.get("sentiment", "neutral")
                sentiment_counts[sentiment] += 1
            
            print("R√©partition des sentiments:")
            for sentiment, count in sentiment_counts.items():
                print(f"  - {sentiment}: {count}")
            
            # Afficher quelques exemples de feedback
            print("\nExemples de feedbacks:")
            for i, feedback in enumerate(feedbacks[:3], 1):
                message = feedback.get("message", "Pas de message")
                sentiment = feedback.get("sentiment", "neutral")
                print(f"  {i}. {sentiment.capitalize()}: {message}")
            
            if len(feedbacks) > 3:
                print(f"  ... et {len(feedbacks) - 3} autres feedbacks")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des feedbacks: {e}")
        return False

def run_all_tests():
    """Ex√©cute tous les tests d'int√©gration."""
    print("=====================================")
    print("TESTS D'INT√âGRATION ANALYTICS")
    print("=====================================")
    
    # V√©rifier les variables d'environnement
    env_vars_ok = check_environment_variables()
    
    if not env_vars_ok:
        print("\n‚ö†Ô∏è Des variables d'environnement sont manquantes. Certains tests pourraient √©chouer.")
    
    # Tester l'initialisation des fournisseurs
    provider_ok = test_provider_initialization()
    
    if not provider_ok:
        print("\n‚ùå Impossible d'initialiser le fournisseur d'analytics. Arr√™t des tests.")
        return
    
    # Tester la r√©cup√©ration des sessions
    sessions_ok = test_session_retrieval()
    
    # Tester la r√©cup√©ration des feedbacks
    feedbacks_ok = test_feedback_retrieval()
    
    # R√©sum√© des tests
    print("\n=====================================")
    print("R√âSUM√â DES TESTS")
    print("=====================================")
    print(f"‚úÖ Variables d'environnement: {'OK' if env_vars_ok else '√âCHEC'}")
    print(f"‚úÖ Initialisation du fournisseur: {'OK' if provider_ok else '√âCHEC'}")
    print(f"‚úÖ R√©cup√©ration des sessions: {'OK' if sessions_ok else '√âCHEC'}")
    print(f"‚úÖ R√©cup√©ration des feedbacks: {'OK' if feedbacks_ok else '√âCHEC'}")
    
    # Conclusion
    total_tests = 4
    passed_tests = sum([env_vars_ok, provider_ok, sessions_ok, feedbacks_ok])
    print("\n-------------------------------------")
    print(f"Total des tests: {total_tests}")
    print(f"R√©ussis: {passed_tests}")
    print(f"√âchou√©s: {total_tests - passed_tests}")
    print("-------------------------------------")
    
    if passed_tests == total_tests:
        print("üéâ Tous les tests ont r√©ussi! L'int√©gration avec l'API fonctionne correctement.")
    else:
        print(f"‚ö†Ô∏è {total_tests - passed_tests} test(s) ont √©chou√©. V√©rifiez les erreurs ci-dessus.")

if __name__ == "__main__":
    run_all_tests() 