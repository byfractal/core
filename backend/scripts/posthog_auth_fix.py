#!/usr/bin/env python3
"""
Script pour tester et fixer les probl√®mes d'authentification avec l'API PostHog.
Ce script v√©rifie diff√©rentes m√©thodes d'authentification et affiche des conseils
pour r√©soudre les probl√®mes d'acc√®s aux replays de session.
"""

import os
import sys
import json
import requests
from pathlib import Path
from dotenv import load_dotenv, set_key
from datetime import datetime, timedelta

# Ajouter le r√©pertoire parent au chemin Python
parent_dir = str(Path(__file__).parent.parent)
sys.path.append(parent_dir)

# Charger les variables d'environnement
load_dotenv()

def verify_env_variables():
    """V√©rifie les variables d'environnement PostHog et affiche leur √©tat"""
    print("\n=== Variables d'environnement PostHog actuelles ===")
    
    api_key = os.getenv("POSTHOG_API_KEY")
    project_id = os.getenv("POSTHOG_PROJECT_ID")
    api_url = os.getenv("POSTHOG_API_URL")
    
    print(f"API URL: {api_url}")
    print(f"Project ID: {project_id}")
    
    # Masquer partiellement la cl√© API pour la s√©curit√©
    if api_key:
        masked_key = api_key[:6] + "..." + api_key[-4:]
        print(f"API Key: {masked_key}")
    else:
        print("API Key: Non d√©finie")
    
    # V√©rifier si toutes les variables n√©cessaires sont d√©finies
    if not all([api_key, project_id, api_url]):
        print("\n‚ùå Configuration incompl√®te: certaines variables d'environnement sont manquantes")
        return False
    
    return True

def test_personal_api_key():
    """Teste l'authentification avec la cl√© API personnelle"""
    print("\n=== Test d'authentification avec la cl√© API personnelle ===")
    
    api_key = os.getenv("POSTHOG_API_KEY")
    project_id = os.getenv("POSTHOG_PROJECT_ID")
    api_url = os.getenv("POSTHOG_API_URL")
    
    # V√©rifier le projet
    url = f"{api_url}/projects/{project_id}"
    headers = {"Authorization": f"Bearer {api_key}"}
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        project_data = response.json()
        print(f"‚úÖ Authentification r√©ussie √† l'API PostHog")
        print(f"   Projet: {project_data.get('name', 'Nom non disponible')}")
        return True
        
    except requests.exceptions.HTTPError as e:
        print(f"‚ùå Erreur d'authentification: {e}")
        print(f"   Statut: {e.response.status_code}")
        print(f"   R√©ponse: {e.response.text}")
        
        if e.response.status_code == 401:
            print("\n‚ö†Ô∏è La cl√© API est invalide ou a expir√©.")
            print("   Veuillez v√©rifier que vous utilisez une cl√© API personnelle valide depuis les param√®tres de PostHog.")
        
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return False

def test_project_api_key():
    """Teste l'authentification avec une cl√© API de projet"""
    print("\n=== Test d'authentification alternative avec cl√© API de projet ===")
    
    api_key = os.getenv("POSTHOG_PROJECT_API_KEY", os.getenv("POSTHOG_API_KEY"))
    project_id = os.getenv("POSTHOG_PROJECT_ID")
    api_url = os.getenv("POSTHOG_API_URL")
    
    # Utiliser un format d'authentification diff√©rent pour les cl√©s de projet
    url = f"{api_url}/projects/{project_id}"
    headers = {"Authorization": f"Bearer {api_key}"}
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        project_data = response.json()
        print(f"‚úÖ Authentification r√©ussie avec la cl√© API de projet")
        print(f"   Projet: {project_data.get('name', 'Nom non disponible')}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return False

def test_session_recording_access():
    """Teste sp√©cifiquement l'acc√®s aux enregistrements de session"""
    print("\n=== Test d'acc√®s aux enregistrements de session ===")
    
    api_key = os.getenv("POSTHOG_API_KEY")
    project_id = os.getenv("POSTHOG_PROJECT_ID")
    api_url = os.getenv("POSTHOG_API_URL")
    
    # Date de 7 jours en arri√®re
    date_from = (datetime.now() - timedelta(days=7)).isoformat()
    
    # URL pour les enregistrements de session
    url = f"{api_url}/projects/{project_id}/session_recordings"
    headers = {"Authorization": f"Bearer {api_key}"}
    params = {"limit": 1, "date_from": date_from}
    
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        
        recordings = response.json()
        count = len(recordings.get("results", []))
        
        print(f"‚úÖ Acc√®s r√©ussi aux enregistrements de session")
        print(f"   {count} enregistrements trouv√©s dans les 7 derniers jours")
        
        if count == 0:
            print("   ‚ö†Ô∏è Aucun enregistrement trouv√© dans la p√©riode sp√©cifi√©e.")
            print("      Cela peut √™tre normal si aucune session n'a √©t√© enregistr√©e r√©cemment.")
            print("      Essayez d'augmenter la plage de dates ou v√©rifiez que le recording est bien activ√©.")
        
        return True
        
    except requests.exceptions.HTTPError as e:
        print(f"‚ùå Erreur d'acc√®s aux enregistrements: {e}")
        print(f"   Statut: {e.response.status_code}")
        print(f"   R√©ponse: {e.response.text}")
        
        if e.response.status_code == 403:
            print("\n‚ö†Ô∏è Erreur 403 Forbidden - Probl√®me de permissions")
            print("   Votre cl√© API n'a pas les permissions n√©cessaires pour acc√©der aux enregistrements.")
            print("   V√©rifiez que vous avez les permissions 'View recordings' dans les param√®tres de projet.")
            print("   Si vous utilisez une cl√© personnelle, v√©rifiez que vous √™tes bien administrateur du projet.")
        
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return False

def update_api_key():
    """Permet √† l'utilisateur de mettre √† jour la cl√© API PostHog"""
    print("\n=== Mise √† jour de la cl√© API PostHog ===")
    
    current_key = os.getenv("POSTHOG_API_KEY", "")
    masked_current = current_key[:6] + "..." + current_key[-4:] if current_key else "Non d√©finie"
    
    print(f"Cl√© API actuelle: {masked_current}")
    print("\nPour cr√©er une nouvelle cl√© API personnelle dans PostHog:")
    print("1. Connectez-vous √† votre compte PostHog")
    print("2. Allez dans 'Settings' > 'Personal API Keys'")
    print("3. Cliquez sur 'Create personal API key'")
    print("4. Donnez un nom √† votre cl√© (ex: 'HCentric Dev')")
    print("5. Copiez la cl√© g√©n√©r√©e")
    
    # Demander la nouvelle cl√© API
    new_key = input("\nEntrez votre nouvelle cl√© API PostHog (ou appuyez sur Entr√©e pour conserver l'actuelle): ").strip()
    
    # Si l'utilisateur a entr√© une nouvelle cl√©
    if new_key:
        # Trouver le chemin du fichier .env
        env_path = Path(os.path.join(os.getcwd(), '..', '.env'))
        if not env_path.exists():
            env_path = Path(os.path.join(os.getcwd(), '.env'))
        
        if env_path.exists():
            # Mettre √† jour le fichier .env
            set_key(str(env_path), "POSTHOG_API_KEY", new_key)
            print(f"‚úÖ Cl√© API mise √† jour dans {env_path}")
            
            # Recharger les variables d'environnement
            os.environ["POSTHOG_API_KEY"] = new_key
            print("‚úÖ Variable d'environnement mise √† jour")
            
            return True
        else:
            print(f"‚ùå Fichier .env non trouv√© √† {env_path}")
            return False
    else:
        print("Aucune modification apport√©e √† la cl√© API.")
        return False

def show_fallback_options():
    """Affiche les options de repli si l'acc√®s √† l'API √©choue"""
    print("\n=== Options de d√©veloppement sans acc√®s aux replays ===")
    
    print("Si vous ne pouvez pas acc√©der aux replays de PostHog, vous pouvez:")
    print("1. Cr√©er des donn√©es de test simul√©es pour le d√©veloppement")
    print("2. Mettre en place un mode de d√©veloppement qui utilise des donn√©es fictives")
    print("3. Utiliser des captures d'√©cran statiques pour les tests de mise en page")
    
    print("\nPour impl√©menter le mode de d√©veloppement avec donn√©es simul√©es:")
    print("- Ajoutez une variable POSTHOG_USE_MOCK_DATA=true dans votre .env")
    print("- Dans la classe PostHogClient, modifiez les m√©thodes pour retourner des donn√©es simul√©es quand cette variable est activ√©e")

def run_tests():
    """Ex√©cute tous les tests d'authentification et d'acc√®s"""
    results = {}
    
    # V√©rifier les variables d'environnement
    env_vars_ok = verify_env_variables()
    results["Variables d'environnement"] = env_vars_ok
    
    if not env_vars_ok:
        print("\n‚ùå Variables d'environnement incompl√®tes. Veuillez les configurer avant de continuer.")
        return results
    
    # Tester l'authentification avec la cl√© API personnelle
    results["Authentification API"] = test_personal_api_key()
    
    # Tester l'acc√®s aux enregistrements de session
    results["Acc√®s aux replays"] = test_session_recording_access()
    
    # Si l'authentification a √©chou√©, essayer avec une cl√© de projet
    if not results["Authentification API"]:
        results["Authentification alternative"] = test_project_api_key()
    
    return results

def print_summary(results):
    """Affiche un r√©sum√© des r√©sultats des tests"""
    print("\n=======================================")
    print("R√âSUM√â DES TESTS")
    print("=======================================")
    
    for test, result in results.items():
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHEC"
        print(f"{status} - {test}")
    
    # V√©rifier si tous les tests ont r√©ussi
    if all(results.values()):
        print("\nüéâ Tous les tests ont r√©ussi! Vous pouvez acc√©der aux donn√©es de PostHog.")
        return True
    else:
        print("\n‚ö†Ô∏è Certains tests ont √©chou√©. Des actions sont n√©cessaires.")
        return False

def suggest_fixes(results):
    """Sugg√®re des corrections bas√©es sur les r√©sultats des tests"""
    if not results.get("Variables d'environnement", False):
        print("\n1. Vous devez d'abord configurer toutes les variables d'environnement:")
        print("   - POSTHOG_API_KEY: Votre cl√© API personnelle")
        print("   - POSTHOG_PROJECT_ID: L'ID de votre projet PostHog")
        print("   - POSTHOG_API_URL: L'URL de l'API (g√©n√©ralement https://app.posthog.com/api)")
    
    if not results.get("Authentification API", False):
        print("\n2. Probl√®me d'authentification:")
        print("   - V√©rifiez que votre cl√© API est valide et n'a pas expir√©")
        print("   - G√©n√©rez une nouvelle cl√© API personnelle si n√©cessaire")
    
    if not results.get("Acc√®s aux replays", False):
        print("\n3. Probl√®me d'acc√®s aux replays:")
        print("   - V√©rifiez que l'enregistrement des sessions est activ√© dans votre projet")
        print("   - Assurez-vous que votre compte a les permissions pour voir les enregistrements")
        print("   - Si vous utilisez une cl√© de projet, elle doit avoir la permission 'View recordings'")
    
    # Offrir d'autres options si les tests continuent d'√©chouer
    print("\nSi les probl√®mes persistent apr√®s avoir essay√© les solutions ci-dessus:")
    print("- Essayez une autre cl√© API (de projet ou personnelle)")
    print("- Contactez votre administrateur PostHog pour v√©rifier les permissions")
    print("- Consid√©rez l'utilisation de donn√©es simul√©es pour le d√©veloppement (voir ci-dessous)")

if __name__ == "__main__":
    print("==========================================")
    print("DIAGNOSTIC D'AUTHENTIFICATION POSTHOG")
    print("==========================================")
    
    # Ex√©cuter les tests
    results = run_tests()
    
    # Afficher le r√©sum√©
    all_passed = print_summary(results)
    
    # Si certains tests ont √©chou√©, proposer des solutions
    if not all_passed:
        suggest_fixes(results)
        
        # Demander si l'utilisateur souhaite mettre √† jour la cl√© API
        update_choice = input("\nSouhaitez-vous mettre √† jour votre cl√© API PostHog? (o/n): ").lower()
        if update_choice == 'o' or update_choice == 'oui':
            update_api_key()
            print("\nVeuillez ex√©cuter ce script √† nouveau pour v√©rifier si le probl√®me est r√©solu.")
        
        # Montrer les options de repli
        show_fallback_options()
    
    print("\n==========================================") 