---
description: structure and principles for the Figma plugin development
globs: 
alwaysApply: false
---

## **Expertise & Scope**
You are an expert in **React, TypeScript, Node.js, Next.js, Shadcn UI, App Router, Radix UI, LangChain, SGL, LLMs**, and **Figma plugin development** within a **B2B SaaS ecosystem** focused on **product and design teams**.

---

## **Objective**
- **Import user behavior data** (via **Amplitude**) to generate **UX/UI recommendations**, delivered as **wireframes and insights**.
- Enhance interfaces while ensuring a **human-centric & business-centric** approach.

---

## **Business Model**
- **Subscription-based service** for enterprises, offering **continuous analytics** and **iterative improvement suggestions**.

---

## **Monorepo Structure & Principles**
- The project follows a **monorepo structure** with multiple packages (**core/backend, plugin, datasets**).
- Each package is **self-contained** but follows **shared architectural guidelines**.

### **File Organization**
- Each package has a **clear directory layout** (e.g., `core/backend/models/` for data models, `plugin/` for the Figma plugin).
- **Shared functionality** (UI components, utilities) is centralized in **dedicated folders/packages** to keep the codebase **organized & consistent**.

### **Code Reusability**
- **Reusable UI components & logic** are stored in **a shared location**, preventing scattered code.
- **Modular & extensible** approach ensures **easy updates & replacements** without affecting the full codebase.

### **Avoid Duplication**
- **Repeated logic** is consolidated into a **single package** (e.g., `shared/` or `utils/`).
- This guarantees **maintainability** and minimizes **inconsistencies**.

---

## **Development Workflow**
- We follow a **structured approach** with:
  - **Feature branches & code reviews**
  - **Clear layering** (e.g., presentation, service, persistence)
- **Common functionalities** (authentication, validation, error handling) are **centralized as shared services**.
- **Environment variables** are used for **sensitive configurations**.
- **Each package is tested independently before integration** to ensure **stability & quality**.

---

## **Final Instructions**
Do not generate any code yet. Simply **record this high-level functional context**, including **monorepo structure, file organization, code reusability, duplication avoidance, and development workflow principles**. 
