/**
 * Fonctions de test pour v√©rifier la connexion avec Clerk
 * Ce fichier permet de tester la configuration Clerk dans l'environnement Figma
 */

import clerkAPI from "./services/clerk-api";

/**
 * Teste la connexion avec Clerk et v√©rifie la configuration
 * @returns {Promise<boolean>} Succ√®s ou √©chec du test
 */
export const testClerkConnection = async (): Promise<boolean> => {
  try {
    console.log("üß™ D√©but du test de connexion Clerk...");

    // V√©rifier si la cl√© publishable est configur√©e
    const publishableKey =
      process.env.VITE_CLERK_PUBLISHABLE_KEY ||
      (window as any).__VITE_CLERK_PUBLISHABLE_KEY ||
      (window as any).VITE_CLERK_PUBLISHABLE_KEY;

    console.log("üîë Cl√© trouv√©e?", !!publishableKey);

    if (!publishableKey) {
      console.error("‚ùå Erreur: Cl√© publishable Clerk manquante");
      return false;
    }

    // V√©rifier le stockage local
    const testToken = "test_token_" + Date.now();
    const storageResult = clerkAPI.storeClerkToken(testToken);
    console.log("üíæ Stockage local fonctionnel:", storageResult);

    if (!storageResult) {
      console.error("‚ùå Erreur: Probl√®me de stockage local");
      return false;
    }

    // V√©rifier la communication avec Figma
    try {
      parent.postMessage(
        {
          pluginMessage: {
            type: "TEST_CONNECTION",
            success: true,
          },
        },
        "*"
      );
      console.log("üì§ Message envoy√© √† Figma");
    } catch (error) {
      console.error("‚ùå Erreur lors de l'envoi du message √† Figma:", error);
      return false;
    }

    console.log("‚úÖ Test de connexion Clerk r√©ussi!");
    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors du test de connexion Clerk:", error);
    return false;
  }
};
